Game design v1.0

Game architecture : Client-Server

--------------------------------------------------------------------------------------------

Modules required:-

1.) Server Module -->
    1.1) Server waits for the players to connect
        a) Receives a player request over TCP connection.
        b) Assigns ID to the player and store information
        c) Sends the ID information to the player
    1.2) When actual game has started.
        a) Receives moves from the hosts over the UDP connection for some time
        b) Updates the game state
        c) Sends the game state to every host
        d) Repeat if atleast snake is alive.

2.) Client Module -->
    2.1) Request to connect
        a) Connect to server via a TCP connection.
        b) Sends name, IP addr and socket no for UDP connection.
        c) Receives the player Id.
        d) Disconnect.
    2.2) When actual game has started
        a) Wait for the interrupts (key pressed) for some time.
        b) Sends the key if pressed any to the server over the UDP connection.
        c) Receives the new game state from server
        d) Draw the received game state.
        e) Repeat.


---------------------------------------------------------------------------------------------

Functions required:-

1.) Client -->
    1.1) establish_connection(ip_addr:char[], port_no:int) - returns player_id:int
    1.2) get_pressed_key() - returns set_keys:char[] or return key:char
    1.3) send_move() - returns void
    1.4) receive_state() - returns gamestate:struct gamedata
    1.5) draw_game_state(gamestate : struct gamedata) - returns void

2.) Server -->
    2.1) listen_for_player() - returns player:struct player
    2.2) listen_for_moves() - returns player_moves:struct move[]
    2.3) update_direction(player_moves:struct moves[]) : returns void
    2.3) move_snake(id:int) - returns void
    2.4) next_game_state(gamestate : struct gamedata) - returns gamestate:struct gamedata
    2.5) check_for_collision(gamestate : struct gamedata) - returns dead_IdList:int[]
    2.6) remove_player(id:int) - returns void
    2.7) send_game_state(player:struct player, gamestate:struct gamedata) - returns void


----------------------------------------------------------------------------------------------


Data Structures Required:-

1.) Client -->
    1.1) struct gamedata{
            //Same as server
        }

2.) Server -->
    2.1) struct player{
            color : color_t
            points : struct pair[]
            ipaddr : ipaddr_t
            port : int
            dir : int
            score : int
            highest_score : int
            rank : int
            num_of_wins : int
            body_symbol : char
            alive : int
         }
    2.2) struct move{
            player_id : int
            key : char
         }
    2.3) struct gamedata{
            height : int
            width : int
            players : struct player[]
            level : int
            food : struct pair[]
            obstacles : struct pair[]
            food_symbol : char
            obstacle_symbol : char
         }


---------------------------------------------------------------------------------------------

Additional Functionalities Required ;-

1.) Game Levels
2.) Score Board 

---------------------------------------------------------------------------------------------

Raise issues and try to integrate the additional functionalities into the design.
Copy this file, change the version number and then make changes.
