Game design v1.3

Game architecture : Client-Server

--------------------------------------------------------------------------------------------

Modules required:-

1.) Server Module -->
    1.0) Input required from user
        a) TCP listening port number
        b) UDP listening port number
    1.1) Server waits for the players to connect
        a) Receives a player request over TCP connection.
        b) Assigns ID to the player and store information
        c) Sends the ID information to the player
    1.2) When actual game has started.
        a) Receives moves from the hosts over the UDP connection for some time
        b) Updates the game state
        c) Sends the game state to every host
        d) Repeat if atleast 2 snakes are alive.
        e) Leaderboard Updates.

2.) Client Module -->
    2.0) Input required from user
        a) Server IP address
        b) Server TCP connection port number
        c) Server UDP connection port number
        d) Desired Client UDP number
    2.1) Request to connect
        a) Connect to server via a TCP connection.
        b) Sends name, IP addr and port no for UDP connection.
        c) Receives the player Id.
        d) Disconnect.
    2.2) When actual game has started
        a) Wait for the interrupts (key pressed) for some time.
        b) Sends the key and ID to the server over the UDP connection.
        c) Receives the new game state from server
        d) Draw the received game state.
        e) Repeat.


---------------------------------------------------------------------------------------------

Functions required:-

1.) Client -->
    1.1) establish_connection(ip_addr:char[], port_no:int) - returns player_id:int
    1.2) get_pressed_key() - returns set_keys:char[] or return key:char
    1.3) send_move() - returns void
    1.4) receive_state() - returns gamestate:struct gamedata
    1.5) draw_game_state(gamestate : struct gamedata) - returns void

2.) Server -->
    2.1) listen_for_player(next_free_id : int) - returns player:struct player
    2.2) listen_for_moves() - returns player_moves:struct move[]
    2.3) update_direction(player_moves:struct moves[]) : returns void
    2.3) move_snake(player : struct player) - returns void
    2.4) next_game_state(gamestate : struct gamedata) - returns gamestate:struct gamedata
    2.5) check_for_collision(gamestate : struct gamedata) - returns void
    2.6) remove_player(player : struct player) - returns void
    2.7) send_game_state(player:struct player, gamestate:struct gamedata) - returns void


----------------------------------------------------------------------------------------------


Data Structures Required:-

1.) Client -->
    1.1) struct gamedata_t{
            //Same as server
        }

2.) Server -->
    2.1) struct player_t{
            player_id : int
            snake : struct snake_t
            ipaddr : ipaddr_t
            port : int
            score : int
            highest_score : int
            rank : int
            num_of_wins : int
            alive : int
            name : char[]
         }
    2.2) struct snake_t{
            points : struct pair_t[]
            length : int
            color : color_t
            dir : direction_t
         }
    2.2) struct move_t{
            player_id : int
            key : char
         }
    2.3) struct gamedata_t{
            height : int
            width : int
            players : struct player_t[]
            level : int
            food : struct pair_t[]
            obstacles : struct pair_t[]
            food_symbol : char
            obstacle_symbol : char
            request_buffer : char[]
            no_of_live_players : int
            no_of_initial_players : int
            no_of_obstacles : int
            no_of_food : int
         }
    2.4) typedef enum direction_t{
            UP = 0, DOWN, LEFT, RIGHT;
         }direction_t;
    2.5) struct pair_t{
            int first, second;
         }


---------------------------------------------------------------------------------------------

Changes:-

1.) Name Added for each player in player_t.

---------------------------------------------------------------------------------------------

To Do:-

1.)  

---------------------------------------------------------------------------------------------

Assumptions:-

1. Players id is same as the index in the players array
2. (-1,-1) refers to invalid coordinate


---------------------------------------------------------------------------------------------

Additional Functionalities/Details Required :-

0.) UDP Message Format
1.) TCP Message Format
2.) Game Levels - Think about variable speed, speed in different levels
3.) Score Board 
4.) Game arena implementation details/function prototypes

---------------------------------------------------------------------------------------------

Complete the above list.
Copy this file, change the version number and then make changes.
